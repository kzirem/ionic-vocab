var fs = require('fs')
var lockFile = require('../')
var test = require('tap').test
var path = require('path')
var lock = path.resolve(__dirname, 'stale.lock')
var touch = require('touch')
var spawn = require('child_process').spawn
var node = process.execPath

// We're using a lockfile with an artificially old date,
// so make it use that instead of ctime.
// Probably you should never do this in production!
lockFile.filetime = 'mtime'

if (process.argv[2] === 'child') {
  return child()
}

function child () {
  // Make fs.stat take 100ms to return its data
  // This is important because, in a test scenario where
  // we're statting the same exact file rapid-fire like this,
  // it'll end up being cached by the FS, and never trigger
  // the race condition we're trying to expose.
  fs.stat = function (stat) { return function () {
    var args = [].slice.call(arguments)
    var cb = args.pop()
    stat.apply(fs, args.concat(function(er, st) {
      setTimeout(function () {
        cb(er, st)
      }, 100)
    }