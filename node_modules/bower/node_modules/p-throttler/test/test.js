'use strict';

var expect = require('expect.js');
var Q = require('q');
var PThtroller = require('../');

describe('PThtroller', function () {
    var timeout;

    afterEach(function () {
        if (timeout) {
            clearTimeout(timeout);
            timeout = null;
        }
    });

    describe('.enqueue', function () {
        it('return a promise', function () {
            var throttler = new PThtroller();
            var promise;

            promise = throttler.enqueue(function () { return Q.resolve('foo'); });

            expect(promise).to.be.an('object');
            expect(promise.then).to.be.a('function');
        });

        it('should call the function and fulfill the promise accordingly', function (next) {
            var throttler = new PThtroller();

            throttler.enqueue(function () { return Q.resolve('foo'); })
            .then(function (ret) {
                expect(ret).to.equal('foo');

                return throttler.enqueue(function () { return Q.reject(new Error('foo')); });
            })
           .fail(function (err) {
                expect(err).to.be.an(Error);
                expect(err.message).to.equal('foo');
                next();
            })
            .done();
        });

        it('should forward promise progress', function (next) {
            var progress;
            var throttler = new PThtroller();

            throttler.enqueue(function () {
                var deferred = Q.defer();

                setTimeout(function () {
               